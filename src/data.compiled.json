{
  "__internal": {
    "configMode": {
      "name": "Mode",
      "description": {
        "simple": "Simplified config options",
        "advanced": "All available options"
      },
      "default": "simple",
      "values": [
        "Quick Configuration [simple]",
        "Advanced Configuration [advanced]"
      ]
    },
    "platform": {
      "name": "Platform",
      "description": {
        "Windows": "Config for Windows",
        "Linux": "Config for Linux",
        "Mac OS": "Config for Mac OS"
      },
      "default": null,
      "values": [
        "Windows",
        "Linux",
        "Mac OS"
      ]
    }
  },
  "parity": {
    "chain": {
      "name": "Chain",
      "type": "string",
      "description": {
        "foundation": "Main Network",
        "kovan": "Kovan Test Network",
        "dev": "Local Development Chain",
        "ropsten": "Ropsten Test Network",
        "olympic": "Olympic Network",
        "musicoin": "Musicoin Network",
        "ellaism": "Ellaism Network",
        "tobalaba": "Tobalaba Network",
        "easthub": "Easthub Network",
        "social": "Social Network"
      },
      "default": "foundation",
      "suggestions": [
        "foundation",
        "kovan",
        "dev",
        "ropsten",
        "olympic",
        "musicoin",
        "ellaism",
        "tobalaba",
        "easthub",
        "social"
      ],
      "simple": true
    },
    "mode": {
      "name": "Operating Mode",
      "type": "string",
      "description": {
        "last": "Uses the last-used mode, active if none",
        "active": "Openethereum continously syncs the chain",
        "passive": "Openethereum syncs initially, then sleeps and wakes regularly to resync",
        "dark": "Openethereum syncs only when the RPC is active",
        "offline": "Syncing is disabled (no network)"
      },
      "default": "last",
      "values": [
        "Last [last]",
        "Active [active]",
        "Passive [passive]",
        "Dark Mode [dark]",
        "Offline [offline]"
      ],
      "simple": true
    },
    "mode_timeout": {
      "name": "Mode Timeout",
      "type": "number",
      "description": "Openethereum will move to inactive mode after {} seconds.",
      "default": 300,
      "min": 0,
      "max": 10000,
      "condition": "settings.parity.mode !== 'active' && !isOffline"
    },
    "mode_alarm": {
      "name": "Mode Alarm",
      "type": "number",
      "description": "Openethereum will automatically wake-up every {} seconds.",
      "default": 3600,
      "min": 0,
      "max": 600000,
      "condition": "settings.parity.mode === 'passive'"
    },
    "base_path": {
      "name": "Base Path",
      "type": "path",
      "description": "Blockchain and settings will be stored in {}.",
      "default": "$BASE",
      "simple": true
    },
    "db_path": {
      "name": "Database Path",
      "type": "path",
      "description": "Openethereum databases will be stored in {}.",
      "default": "$LOCAL/chains"
    },
    "keys_path": {
      "name": "Keys Path",
      "type": "path",
      "description": "Your encrypted private keys will be stored in {}.",
      "default": "$BASE/keys"
    },
    "identity": {
      "name": "Identity",
      "type": "string",
      "description": "You will be identified as '{}' amongst other nodes..",
      "default": ""
    },
    "no_persistent_txqueue": {
      "name": "No persistent txqueue",
      "type": "bool",
      "description": "Don't save pending local transactions to disk to be restored whenever the node restarts.",
      "default": false,
      "simple": true
    },
    "section": "Parity",
    "description": "Basic parameters regarding Openethereum operation."
  },
  "account": {
    "unlock": {
      "name": "Accounts to unlock",
      "type": "string[]",
      "description": "From: [{}] you'll be able to send transactions without password.",
      "default": [
        ""
      ]
    },
    "password": {
      "name": "Password File",
      "type": "string[]",
      "description": "File at {} should contain passwords to unlock your accounts. One password per line.",
      "default": [
        ""
      ]
    },
    "keys_iterations": {
      "name": "Keys deriving iterations",
      "type": "number",
      "description": "Openethereum will do {} iterations to derive private keys from passphrase (higher=safer).",
      "default": 10240,
      "min": 1000,
      "max": 1000000
    },
    "section": "Account",
    "refresh_time": {
      "name": "Refresh time",
      "type": "number",
      "description": "Specify the cache time of accounts read from disk. If you manage thousands of accounts set this to 0 to disable refresh.",
      "default": 5
    },
    "fast_unlock": {
      "name": "Fast unlock",
      "type": "bool",
      "description": "Use drastically faster unlocking mode. This setting causes raw secrets to be stored unprotected in memory, so use with care.",
      "default": false
    },
    "description": "Unlocking accounts and private keys security parameters."
  },
  "ui": {
    "path": {
      "name": "Path",
      "type": "path",
      "description": "Wallet configuration will be stored at {}.",
      "default": "$BASE/signer"
    },
    "section": "Parity Wallet",
    "description": "Manage your wallet, confirm and sign transactions."
  },
  "network": {
    "warp": {
      "name": "Warp Sync",
      "type": "bool",
      "default": true,
      "description": "Openethereum will sync by downloading latest state first. Node will be operational in couple minutes."
    },
    "warp_barrier": {
      "name": "Warp barrier",
      "type": "number",
      "description": "When warp enabled never attempt regular sync before warping to block NUM.",
      "default": null,
      "condition": "settings.network.warp"
    },
    "port": {
      "name": "Port",
      "type": "number",
      "description": "Openethereum will listen for connections on port {}.",
      "default": 30303
    },
    "min_peers": {
      "name": "Min Peers",
      "type": "number",
      "description": "Openethereum will try to maintain connection to at least {} peers.",
      "default": 25,
      "min": 0,
      "max": 100000,
      "simple": true
    },
    "max_peers": {
      "name": "Max Peers",
      "type": "number",
      "description": "Openethereum will maintain at most {} peers.",
      "default": 50,
      "min": 0,
      "max": 100000,
      "simple": true
    },
    "snapshot_peers": {
      "name": "Snapshot Sync Peers",
      "type": "number",
      "description": "Openethereum will maintain additional {} peers for snapshot sync.",
      "default": 0,
      "min": 0,
      "max": 100000
    },
    "max_pending_peers": {
      "name": "Max Pending Peers",
      "type": "number",
      "description": "Openethereum will allow up to {} pending connections.",
      "default": 64,
      "min": 0,
      "max": 100000
    },
    "nat": {
      "name": "NAT settings",
      "type": "string",
      "description": {
        "any": "Openethereum will use all possible methods to determine public IP address.",
        "none": "Openethereum won't attempt detect you public IP address",
        "upnp": "Openethereum will use UPNP to detect your public IP address.",
        "extip:": "Fill up the config manually and provide your public IP address."
      },
      "default": "any",
      "values": [
        "Any [any]",
        "None [none]",
        "UPNP [upnp]",
        "External IP [extip:]"
      ],
      "simple": true
    },
    "id": {
      "name": "Network ID",
      "type": "number",
      "description": "Network ID of the chain will be overridden to: {}",
      "default": 0
    },
    "bootnodes": {
      "name": "Bootnodes",
      "type": "string[]",
      "description": "Override the bootnodes from selected chain file.",
      "default": [
        ""
      ]
    },
    "discovery": {
      "name": "Peers Discovery",
      "type": "bool",
      "default": true,
      "description": "Enable or disable new peers discovery."
    },
    "node_key": {
      "name": "Node Key",
      "type": "string",
      "description": "Specify node secret key (64-char hex or input to SHA3)",
      "default": ""
    },
    "reserved_peers": {
      "name": "Reserved Peers Path",
      "type": "path",
      "description": "Specify a path to a file with peers' enodes to be always connected to.",
      "default": ""
    },
    "reserved_only": {
      "name": "Reserved Only",
      "type": "bool",
      "description": "Connect only to reserved nodes.",
      "default": false
    },
    "allow_ips": {
      "name": "Allow Connections",
      "type": "string",
      "description": {
        "all": "Openethereum will not filter outbound connections.",
        "private": "Openethereum will connect only to private network IP addresses.",
        "public": "Openethereum will connect only to public network IP addresses."
      },
      "default": "all",
      "values": [
        "All IPs [all]",
        "Private Network [private]",
        "Public Network [public]"
      ]
    },
    "section": "Networking",
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": "Network interfaces. Valid values are 'all', 'local' or the ip of the interface you want parity to listen to.",
      "default": "all"
    },
    "description": "Network and peer-related settings. Network is not available if Openethereum is in offline mode.",
    "condition": "!isOffline"
  },
  "rpc": {
    "disable": {
      "name": "Disable JSON-RPC",
      "type": "bool",
      "description": "You won't be able to interact with Openethereum using JSON-RPC over HTTP.",
      "default": false
    },
    "port": {
      "name": "Port",
      "type": "number",
      "description": "JSON-RPC over HTTP will be accessible on port {}.",
      "default": 8545,
      "simple": true
    },
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": " JSON-RPC will be listening for connections on IP {}.",
      "default": "local",
      "simple": true
    },
    "cors": {
      "name": "CORS",
      "type": "string[]",
      "description": "Allows Cross-Origin Requests from domain '{}'.",
      "default": [],
      "simple": true
    },
    "hosts": {
      "name": "Allowed Hosts",
      "type": "string[]",
      "description": "Allow connections only using specified addresses.",
      "default": [
        "none"
      ]
    },
    "apis": {
      "name": "Exposed APIs",
      "type": "string[]",
      "description": "Only selected APIs will be exposed over this interface.",
      "default": [
        "web3",
        "eth",
        "pubsub",
        "net",
        "parity",
        "parity_pubsub",
        "traces"
      ],
      "values": [
        "Web3 [web3]",
        "Eth [eth]",
        "Net [net]",
        "Personal [personal]",
        "Parity [parity]",
        "Parity Accounts [parity_accounts]",
        "Private transactions [private]",
        "PUB-SUB [pubsub]",
        "Parity PUB-SUB [parity_pubsub]",
        "Whisper [shh]",
        "Whisper PUB-SUB [shh_pubsub]",
        "Traces [traces]",
        "Trusted Signer (unsafe) [signer]",
        "Parity Set* (unsafe) [parity_set]",
        "RPC [rpc]",
        "Secret Store [secretstore]"
      ]
    },
    "server_threads": {
      "name": "Server threads",
      "type": "number",
      "description": "Threads for handling incoming connections for HTTP JSON-RPC server.",
      "default": 1
    },
    "section": "RPC",
    "processing_threads": {
      "name": "Processing threads",
      "type": "number",
      "description": "Turn on additional processing threads for JSON-RPC servers (all transports). Setting this to a non-zero value allows parallel execution of cpu-heavy queries.",
      "default": 4
    },
    "max_payload": {
      "name": "Max payload",
      "type": "number",
      "description": "Specify maximum size for HTTP JSON-RPC requests in megabytes.",
      "default": null
    },
    "keep_alive": {
      "name": "Keep alive",
      "type": "bool",
      "description": "Disable HTTP/1.1 keep alive header. Disabling keep alive will prevent re-using the same TCP connection to fire multiple requests, recommended when using one request per connection.",
      "default": false
    },
    "experimental_rpcs": {
      "name": "Experimental rpcs",
      "type": "bool",
      "description": "Enable experimental RPCs. Enable to have access to methods from unfinalised EIPs in all namespaces",
      "default": false
    },
    "poll_lifetime": {
      "name": "Poll lifetime",
      "type": "number",
      "description": "Set the RPC filter lifetime to S seconds. The filter has to be polled at least every S seconds , otherwise it is removed.",
      "default": 60
    },
    "allow_missing_blocks": {
      "name": "Allow missing blocks",
      "type": "bool",
      "description": "RPC calls will return 'null' instead of an error if ancient block sync is still in progress and the block information requested could not be found",
      "default": false
    },
    "description": "Expose JSON-RPC APIs over HTTP."
  },
  "websockets": {
    "disable": {
      "name": "Disable WebSockets",
      "type": "bool",
      "description": "UI won't work and WebSockets server will be not available.",
      "default": false
    },
    "port": {
      "name": "Port",
      "type": "number",
      "description": "JSON-RPC over WebSockets will be accessible on port {}.",
      "default": 8546,
      "simple": true
    },
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": " JSON-RPC will be listening for connections on IP {}.",
      "default": "local",
      "simple": true
    },
    "origins": {
      "name": "Origins",
      "type": "string[]",
      "description": "Allows connecting from Origin '{}'.",
      "default": [
        "parity://*",
        "chrome-extension://*",
        "moz-extension://*"
      ],
      "simple": true
    },
    "hosts": {
      "name": "Allowed Hosts",
      "type": "string[]",
      "description": "Allow connections only using specified addresses.",
      "default": [
        "none"
      ]
    },
    "apis": {
      "name": "Exposed APIs",
      "type": "string[]",
      "description": "Only selected APIs will be exposed over this interface.",
      "default": [
        "web3",
        "eth",
        "pubsub",
        "net",
        "parity",
        "parity_pubsub",
        "traces"
      ],
      "values": [
        "Web3 [web3]",
        "Eth [eth]",
        "PUB-SUB [pubsub]",
        "Net [net]",
        "Personal [personal]",
        "Parity [parity]",
        "Parity Accounts [parity_accounts]",
        "Private transactions [private]",
        "Traces [traces]",
        "Trusted Signer (unsafe) [signer]",
        "Parity Set* (unsafe) [parity_set]",
        "RPC [rpc]",
        "Secret Store [secretstore]",
        "Parity PUB-SUB [parity_pubsub]",
        "Whiper [shh]",
        "Whisper PUB-SUB [shh_pubsub]"
      ]
    },
    "section": "WebSockets (since 1.7)",
    "max_connections": {
      "name": "Max connections",
      "type": "number",
      "description": "Maximum number of allowed concurrent WebSockets JSON-RPC connections.",
      "default": 100
    },
    "description": "Expose JSON-RPC APIs over WebSockets."
  },
  "ipc": {
    "disable": {
      "name": "Disable IPC",
      "type": "bool",
      "description": "You won't be able to use IPC to interact with Openethereum.",
      "default": false
    },
    "path": {
      "name": "Path",
      "type": "path",
      "description": "Openethereum will create an IPC socket at {}.",
      "default": "$HOME/.local/share/io.parity.ethereum/jsonrpc.ipc"
    },
    "apis": {
      "name": "Exposed APIs",
      "type": "string[]",
      "description": "Only selected APIs will be exposed over this interface.",
      "default": [
        "web3",
        "eth",
        "pubsub",
        "net",
        "parity",
        "parity_pubsub",
        "parity_accounts",
        "traces"
      ],
      "values": [
        "Web3 [web3]",
        "Eth [eth]",
        "PUB-SUB [pubsub]",
        "Net [net]",
        "Personal [personal]",
        "Parity [parity]",
        "Parity Accounts [parity_accounts]",
        "Private transactions [private]",
        "Traces [traces]",
        "Trusted Signer (unsafe) [signer]",
        "Parity Set* (unsafe) [parity_set]",
        "RPC [rpc]",
        "Secret Store [secretstore]",
        "Parity PUB-SUB [parity_pubsub]",
        "Whisper [shh]",
        "Whisper PUB-SUB [shh_pubsub]"
      ]
    },
    "section": "IPC",
    "description": "Expose JSON-RPC APIs over IPC."
  },
  "secretstore": {
    "disable": {
      "name": "Disable Secret Store",
      "type": "bool",
      "description": "You won't be able to encrypt and decrypt secrets.",
      "default": false
    },
    "nodes": {
      "name": "Nodes",
      "type": "string[]",
      "description": "List of other secret store cluster nodes. Format: NODE_PUBLIC_KEY_IN_HEX@NODE_IP:NODE_PORT",
      "default": [
        ""
      ]
    },
    "port": {
      "name": "Port",
      "type": "number",
      "description": "Secret Store will be running on port {}.",
      "default": 8083
    },
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": "Secret Store will listen for connections on IP {}.",
      "default": "local"
    },
    "http_port": {
      "name": "HTTP Port",
      "type": "number",
      "description": "Secret Store HTTP iface will be running on port {}.",
      "default": 8082
    },
    "http_interface": {
      "name": "HTTP Interface",
      "type": "string",
      "description": "Secret Store will listen for HTTP requests on IP {}.",
      "default": "local"
    },
    "path": {
      "name": "Path",
      "type": "path",
      "description": "Encrypted secrets will be stored in {}.",
      "default": "$BASE/secretstore"
    },
    "section": "Secret Store (since 1.7)",
    "disable_http": {
      "name": "Disable http",
      "type": "bool",
      "description": "Disable Secret Store HTTP API.",
      "default": false
    },
    "disable_auto_migrate": {
      "name": "Disable auto migrate",
      "type": "bool",
      "description": "Do not run servers set change session automatically when servers set changes. This option has no effect when servers set is read from configuration file.",
      "default": false
    },
    "acl_contract": {
      "name": "Acl contract",
      "type": "string",
      "description": "Secret Store permissioning contract address source: none, registry (contract address is read from 'secretstore_acl_checker' entry in registry) or address.",
      "default": "registry"
    },
    "service_contract": {
      "name": "Service contract",
      "type": "string",
      "description": "Secret Store Service contract address source: none, registry (contract address is read from 'secretstore_service' entry in registry) or address.",
      "default": null
    },
    "service_contract_srv_gen": {
      "name": "Service contract srv gen",
      "type": "string",
      "description": "Secret Store Service server key generation contract address source: none, registry (contract address is read from 'secretstore_service_srv_gen' entry in registry) or address.",
      "default": null
    },
    "service_contract_srv_retr": {
      "name": "Service contract srv retr",
      "type": "string",
      "description": "Secret Store Service server key retrieval contract address source: none, registry (contract address is read from 'secretstore_service_srv_retr' entry in registry) or address.",
      "default": null
    },
    "service_contract_doc_store": {
      "name": "Service contract doc store",
      "type": "string",
      "description": "Secret Store Service document key store contract address source: none, registry (contract address is read from 'secretstore_service_doc_store' entry in registry) or address.",
      "default": null
    },
    "service_contract_doc_sretr": {
      "name": "Service contract doc sretr",
      "type": "string",
      "description": "Secret Store Service document key shadow retrieval contract address source: none, registry (contract address is read from 'secretstore_service_doc_sretr' entry in registry) or address.",
      "default": null
    },
    "self_secret": {
      "name": "Self secret",
      "type": "string",
      "description": "Hex-encoded secret key of this node.",
      "default": null
    },
    "admin_public": {
      "name": "Admin public",
      "type": "string",
      "description": "Hex-encoded public key of secret store administrator.",
      "default": null
    },
    "server_set_contract": {
      "name": "Server set contract",
      "type": "string",
      "description": "Secret Store server set contract address source: none, registry (contract address is read from 'secretstore_server_set' entry in registry) or address.",
      "default": "registry"
    },
    "description": "Secret Store. Requires a special build of Openethereum."
  },
  "mining": {
    "author": {
      "name": "Author (Coinbase)",
      "type": "string",
      "description": "Account address to receive reward when block is mined.",
      "default": "",
      "simple": true
    },
    "engine_signer": {
      "name": "Engine Signer",
      "type": "string",
      "description": "Account to sign consensus messages and issue blocks for non-PoW chains.",
      "default": ""
    },
    "force_sealing": {
      "name": "Force Sealing",
      "type": "bool",
      "description": "Prepare a block to seal even when there are no miners connected.",
      "default": false
    },
    "reseal_on_txs": {
      "name": "Reseal On Transactions",
      "type": "string",
      "description": {
        "none": "New transactions will not cause a new pending block to be created.",
        "own": "New pending block will be created only on transactions sent using local RPC/IPC",
        "ext": "New pending block will be created only on external transactions.",
        "all": "New pending block will be created for all transactions (both local and external)."
      },
      "default": "own",
      "values": [
        "Never [none]",
        "Local [own]",
        "External [ext]",
        "All [all]"
      ]
    },
    "reseal_min_period": {
      "name": "Reseal Period",
      "type": "number",
      "description": "New pending block will be created only once per {} milliseconds.",
      "default": 2000,
      "min": 1,
      "max": 30000
    },
    "work_queue_size": {
      "name": "Work Queue Size",
      "type": "number",
      "description": "Openethereum will produce at most {} distinct pending blocks for miners.",
      "default": 20,
      "min": 1,
      "max": 100
    },
    "relay_set": {
      "name": "Relay Set",
      "type": "string",
      "description": {
        "cheap": "Relay any transaction in the queue (may include invalid transactions).",
        "strict": "Relay only executed transactions (will relay nothing if not mining).",
        "lenient": "Same as strict when mining, and cheap when not."
      },
      "default": "cheap",
      "values": [
        "Cheap [cheap]",
        "Strict [strict]",
        "Lenient [lenient]"
      ]
    },
    "usd_per_tx": {
      "name": "USD per Transaction",
      "type": "string",
      "description": "You will be paid ${} for a basic transaction - Minimum gas price will be set accordingly.",
      "default": 0.0001,
      "simple": true
    },
    "usd_per_eth": {
      "name": "USD per Eth",
      "type": "string",
      "description": "Specify source (URL) or current price of Eth.",
      "default": "auto"
    },
    "price_update_period": {
      "name": "Price Update Period",
      "type": "string",
      "description": "Openethereum will update price per ETH every {}.",
      "default": "hourly"
    },
    "gas_floor_target": {
      "name": "Gas Floor Target",
      "type": "string",
      "description": "Targeting {} gas per block when sealing a new block.",
      "default": 4700000
    },
    "gas_cap": {
      "name": "Gas Cap",
      "type": "string",
      "description": "Gas limit will be raised at most by {} gas.",
      "default": 6283184
    },
    "tx_gas_limit": {
      "name": "Gas Limit per Transaction",
      "type": "string",
      "description": "Openethereum will reject transactions above {} gas.",
      "default": 0,
      "min": 0,
      "max": 10000000
    },
    "tx_time_limit": {
      "name": "Time Limit per Transaction [ms]",
      "type": "number",
      "description": "Openethereum will start banning senders/code when execution exceeds specified limit.",
      "default": 0,
      "min": 0,
      "max": 100000
    },
    "tx_queue_ban_count": {
      "name": "Ban After",
      "type": "number",
      "description": "Openethereum will start banning senders/code when execution exceeds limit {} time(s).",
      "default": 0,
      "min": 0,
      "max": 1000
    },
    "tx_queue_locals": {
      "name": "Local Accounts",
      "type": "string[]",
      "description": "Specify local accounts for which transactions are prioritized in the queue.",
      "default": [
        ""
      ]
    },
    "tx_queue_ban_time": {
      "name": "Ban For",
      "type": "number",
      "description": "Openethereum will ban senders/code for {} seconds.",
      "default": 0,
      "min": 0,
      "max": 10000
    },
    "tx_queue_size": {
      "name": "Transaction Queue Size",
      "type": "number",
      "description": "Openethereum will keep/relay at most {} transactions in queue.",
      "default": 8192,
      "min": 0,
      "max": 1000000
    },
    "tx_queue_strategy": {
      "name": "Transaction Queue Strategy",
      "type": "string",
      "description": {
        "gas_price": "Txs in the queue are ordered by gas price (high gas price = high priority)",
        "gas": "Txs in the queue are ordered by gas (low gas = high priority)",
        "gas_factory": "Txs in the queue are ordered by gas/2^15 + gas_price (low gas or high gas+high fee = high priority)"
      },
      "default": "gas_price",
      "values": [
        "Gas Price [gas_price]",
        "Gas Only [gas]",
        "Gas & Gas Price [gas_factor]"
      ]
    },
    "extra_data": {
      "name": "Extra Data",
      "type": "string",
      "description": "Blocks that you mine will have '{}' in extra data field.",
      "default": ""
    },
    "remove_solved": {
      "name": "Remove Solved Blocks",
      "type": "bool",
      "description": "Removes solved blocks - faster import speed, but extra solutions to the same work package will go unused.",
      "default": false
    },
    "notify_work": {
      "name": "Notify Work",
      "type": "string[]",
      "description": "URLs to which work package notifications are pushed.",
      "default": [
        ""
      ]
    },
    "refuse_service_transactions": {
      "name": "Refuse Service Transactions",
      "type": "bool",
      "description": "Always refuse service ZGP transactions.",
      "default": false
    },
    "section": "Mining",
    "reseal_on_uncle": {
      "name": "Reseal on uncle",
      "type": "bool",
      "description": "Force the node to author new blocks when a new uncle block is imported.",
      "default": false
    },
    "reseal_max_period": {
      "name": "Reseal max period",
      "type": "number",
      "description": "Specify the maximum time since last block to enable force-sealing. MS is time measured in milliseconds.",
      "default": 120000
    },
    "min_gas_price": {
      "name": "Min gas price",
      "type": "number",
      "description": "Minimum amount of Wei per GAS to be paid for a transaction to be accepted for mining. Overrides --usd-per-tx.",
      "default": null
    },
    "gas_price_percentile": {
      "name": "Gas price percentile",
      "type": "number",
      "description": "Set PCT percentile gas price value from last 100 blocks as default gas price when sending transactions.",
      "default": 50
    },
    "tx_queue_per_sender": {
      "name": "Tx queue per sender",
      "type": "number",
      "description": "Maximum number of transactions per sender in the queue. By default it's 1% of the entire queue, but not less than 16.",
      "default": null
    },
    "tx_queue_mem_limit": {
      "name": "Tx queue mem limit",
      "type": "number",
      "description": "Maximum amount of memory that can be used by the transaction queue. Setting this parameter to 0 disables limiting.",
      "default": 4
    },
    "tx_queue_no_unfamiliar_locals": {
      "name": "Tx queue no unfamiliar locals",
      "type": "bool",
      "description": "Local transactions sent through JSON-RPC (HTTP, WebSockets, etc) will be treated as 'external' if the sending account is unknown.",
      "default": false
    },
    "tx_queue_no_early_reject": {
      "name": "Tx queue no early reject",
      "type": "bool",
      "description": "Disables transaction queue optimization to early reject transactions below minimal effective gas price. This allows local transactions to always enter the pool, despite it being full, but requires additional ecrecover on every transaction.",
      "default": false
    },
    "infinite_pending_block": {
      "name": "Infinite pending block",
      "type": "bool",
      "description": "Pending block will be created with maximal possible gas limit and will execute all transactions in the queue. Note that such block is invalid and should never be attempted to be mined.",
      "default": false
    },
    "max_round_blocks_to_import": {
      "name": "Max round blocks to import",
      "type": "number",
      "description": "Maximal number of blocks to import for each import round.",
      "default": 12
    },
    "description": "Options for mining nodes."
  },
  "stratum": {
    "port": {
      "name": "Port",
      "type": "number",
      "description": "Stratum Server will be running on port {}.",
      "default": 8008
    },
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": " Stratum Server will listen for connections on IP {}.",
      "default": "local"
    },
    "disable": {
      "name": "Disable Stratum",
      "description": "For backwards compatibility; stratum is enabled if the config file contains a `[stratum]` section, and it is not explicitly disabled (disable = true)",
      "default": "false"
    },
    "section": "Stratum (since 1.6)",
    "secret": {
      "name": "Secret",
      "type": "string",
      "description": "Secret for authorizing Stratum server for peers.",
      "default": null
    },
    "description": "Stratum Server for miner push notifications."
  },
  "footprint": {
    "tracing": {
      "name": "Tracing",
      "type": "string",
      "description": {
        "on": "Compute and Store tracing data. (Enables trace_* APIs).",
        "off": "Disable tracing.",
        "auto": "Disable tracing unless it was enable previously for that DB."
      },
      "default": "auto",
      "values": [
        "on",
        "off",
        "auto"
      ],
      "simple": true
    },
    "db_compaction": {
      "name": "DB Compaction Profile",
      "type": "string",
      "description": {
        "hdd": "Increase performance on HDD.",
        "ssd": "Increase performance on SSD.",
        "auto": "Determine automatically."
      },
      "default": "auto",
      "values": [
        "HDD [hdd]",
        "SSD [ssd]",
        "Auto [auto]"
      ],
      "simple": true
    },
    "pruning": {
      "name": "Pruning",
      "type": "string",
      "description": {
        "fast": "Prune old state data. Maintains journal overlay - fast but extra 50MB of memory used.",
        "archive": "Keep all state trie data. No pruning.",
        "auto": "Prune data unless pruning was disable previously for that DB."
      },
      "default": "auto",
      "values": [
        "fast",
        "archive",
        "auto"
      ],
      "simple": true
    },
    "pruning_history": {
      "name": "Pruning History",
      "type": "number",
      "description": "Will keep up to {} old state entries.",
      "default": 64,
      "min": 0,
      "max": 32000,
      "condition": "settings.footprint.pruning !== 'archive'"
    },
    "pruning_memory": {
      "name": "Pruning Memory",
      "type": "number",
      "description": "Will keep up to {} MB old state entries.",
      "default": 32,
      "min": 0,
      "max": 32000,
      "condition": "settings.footprint.pruning !== 'archive'",
      "simple": true
    },
    "fat_db": {
      "name": "Fat DB",
      "type": "string",
      "description": {
        "on": "Enables Fat DB",
        "off": "Disable Fat DB.",
        "auto": "Detect if Fat DB was enabled previously."
      },
      "default": "auto",
      "values": [
        "on",
        "off",
        "auto"
      ],
      "simple": true
    },
    "scale_verifiers": {
      "name": "Autoscale Verifiers Threads",
      "type": "bool",
      "description": "Number of threads will vary depending on the workload. Not guaranteed to be faster.",
      "default": false
    },
    "num_verifiers": {
      "name": "Number of Verifiers Threads",
      "type": "number",
      "description": "Initial number of verifier threads",
      "default": 8,
      "condition": "settings.footprint.scale_verifiers"
    },
    "cache_size_db": {
      "name": "Database Cache",
      "type": "number",
      "description": "Will keep up to {}MB data in Database cache.",
      "default": 128,
      "min": 0,
      "max": 32000,
      "condition": "!settings.footprint.cache_size"
    },
    "cache_size_blocks": {
      "name": "Blockchain Cache",
      "type": "number",
      "description": "Will keep up to {}MB data in Blockchain cache.",
      "default": 8,
      "min": 0,
      "max": 32000,
      "condition": "!settings.footprint.cache_size"
    },
    "cache_size_queue": {
      "name": "Import Queue Cache",
      "type": "number",
      "description": "Will keep up to {}MB of blocks in block import queue.",
      "default": 40,
      "min": 0,
      "max": 32000,
      "condition": "!settings.footprint.cache_size"
    },
    "cache_size_state": {
      "name": "State Cache",
      "type": "number",
      "description": "Will keep up to {}MB data in State cache.",
      "default": 25,
      "min": 0,
      "max": 32000,
      "condition": "!settings.footprint.cache_size"
    },
    "cache_size": {
      "name": "Total Cache Size",
      "type": "number",
      "description": "If defined will never use more then {}MB for all caches. (Overrides other cache settings).",
      "default": 0,
      "min": 0,
      "max": 32000,
      "simple": true
    },
    "fast_and_loose": {
      "name": "Fast and loose",
      "type": "bool",
      "deprecated": true,
      "default": false
    },
    "section": "Footprint",
    "description": "Tune Openethereum CPU, Memory and Disk usage."
  },
  "snapshots": {
    "enable": {
      "name": "Enable",
      "type": "bool",
      "description": "Enable snapshots",
      "default": false,
      "simple": true
    },
    "section": "Snapshots",
    "processing_threads": {
      "name": "Processing threads",
      "type": "number",
      "description": "Enables multiple threads for snapshots creation.",
      "default": null
    },
    "description": "Snapshoting (warp sync) settings."
  },
  "whisper": {
    "section": "Whisper",
    "description": "Whisper network"
  },
  "misc": {
    "logging": {
      "name": "Logging",
      "type": "string",
      "description": "Logging pattern (`<module>=<level>`, e.g. `own_tx=trace`).",
      "default": "",
      "simple": true
    },
    "log_file": {
      "name": "Log File",
      "type": "string",
      "description": "Logs will be stored at {}.",
      "default": "",
      "simple": true
    },
    "color": {
      "name": "Enable Colors",
      "type": "bool",
      "default": true,
      "description": "Enables colors in logs."
    },
    "section": "Miscellaneous",
    "ports_shift": {
      "name": "Ports shift",
      "type": "number",
      "description": "Add SHIFT to all port numbers Parity is listening on. Includes network port and all servers (HTTP JSON-RPC, WebSockets JSON-RPC, SecretStore).",
      "default": 0
    },
    "unsafe_expose": {
      "name": "Unsafe expose",
      "type": "bool",
      "description": "All servers will listen on external interfaces and will be remotely accessible. It's equivalent with setting the following: --[ws,jsonrpc,secretstore,stratum,secretstore-http]-interface=all --*-hosts=all    This option is UNSAFE and should be used with great care!",
      "default": false
    },
    "description": "Other uncategorized options."
  },
  "private_tx": {
    "section": "Private Transactions"
  },
  "metrics": {
    "section": "Metrics",
    "enable": {
      "name": "Enable",
      "type": "bool",
      "description": "Enable prometheus metrics (only full client).",
      "default": false
    },
    "port": {
      "name": "Port",
      "type": "number",
      "description": "Specify the port portion of the metrics server.",
      "default": 3000
    },
    "interface": {
      "name": "Interface",
      "type": "string",
      "description": "Specify the hostname portion of the metrics server, IP should be an interface's IP address, or all (all interfaces) or local.",
      "default": "local"
    }
  }
}